{"ast":null,"code":"var _jsxFileName = \"/Users/fabian/Documents/GitHub/demo-web-project-PentaTech/pages/index.js\";\nvar __jsx = React.createElement;\n\n/**\n * Index\n * @summary The home page of our website.\n */\nimport React, { useState, useEffect } from 'react';\nimport Layout from '../components/Layout';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport axios from 'axios';\nimport Button from 'react-bootstrap/Button';\n\nconst Home = props => {\n  return __jsx(Layout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    },\n    __self: this\n  }, __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }, `Res: ${props.result}`), __jsx(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }), __jsx(LoadingButton, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }), __jsx(\"img\", {\n    src: \"http://localhost:5000/qrcode\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }));\n};\n/** Component for interactive button */\n\n\nconst LoadingButton = () => {\n  const {\n    0: isLoading,\n    1: setLoading\n  } = useState(false);\n  const {\n    0: isClicked,\n    1: setClicked\n  } = useState(false);\n  const {\n    0: names,\n    1: setNames\n  } = useState([]);\n  useEffect(() => {\n    if (isLoading) {\n      checkIn().then(props => {\n        setNames(props.result);\n        setClicked(true);\n        setLoading(false);\n      });\n    }\n  }, [isLoading]);\n\n  const handleClick = () => setLoading(true);\n\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, __jsx(Button, {\n    variant: \"primary\",\n    disabled: isLoading,\n    onClick: !isLoading ? handleClick : null,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, isLoading ? 'Loading…' : 'Check in'), isClicked ? __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, __jsx(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }), names.map((name, index) => {\n    return __jsx(\"p\", {\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, name, __jsx(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }));\n  })) : null);\n}; // ADD YOUR GET ROUTE, YOUR NAME IN PARAM FOR FUNCTION, AND YOUR RESPONSE IN RETURN OBJECT\n\n\nconst checkIn = async () => {\n  return axios.all([axios.get('http://localhost:5000/check-fabian'), axios.get('http://localhost:5000/check-miguel'), axios.get('http://localhost:5000/check-chy')]).then(axios.spread(function (fabian, miguel, chy) {\n    return {\n      result: [fabian.data.Success, miguel.data.Success, chy.data.Success]\n    };\n  })).then().catch(error => {\n    console.error(error);\n    return {\n      result: 'Failed to check in members'\n    };\n  });\n};\n\nHome.getInitialProps = async () => {\n  try {\n    // call server at endpoint /search-title\n    const res = await axios.get('http://localhost:5000/ping'); // res.data is the JSON object returned which is { Success: ***data*** }\n\n    return {\n      result: res.data.Success\n    };\n  } catch (error) {\n    console.error(error);\n    return {\n      result: 'Failed to fetch data from server'\n    };\n  }\n};\n\nexport default Home;","map":{"version":3,"sources":["/Users/fabian/Documents/GitHub/demo-web-project-PentaTech/pages/index.js"],"names":["React","useState","useEffect","Layout","axios","Button","Home","props","result","LoadingButton","isLoading","setLoading","isClicked","setClicked","names","setNames","checkIn","then","handleClick","map","name","index","all","get","spread","fabian","miguel","chy","data","Success","catch","error","console","getInitialProps","res"],"mappings":"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","sourcesContent":["/**\n * Index\n * @summary The home page of our website.\n */\n\nimport React, { useState, useEffect } from 'react';\nimport Layout from '../components/Layout';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport axios from 'axios';\nimport Button from 'react-bootstrap/Button';\n\nconst Home = props => {\n    return (\n        <Layout>\n            {/* <h1>Media Tracker</h1>\n            <p>Home page</p> */}\n            <p>{`Res: ${props.result}`}</p>\n            <br />\n            <LoadingButton />\n            <img src='http://localhost:5000/qrcode' />\n        </Layout>\n    );\n};\n\n/** Component for interactive button */\nconst LoadingButton = () => {\n    const [isLoading, setLoading] = useState(false);\n    const [isClicked, setClicked] = useState(false);\n    const [names, setNames] = useState([]);\n\n    useEffect(() => {\n        if (isLoading) {\n            checkIn().then(props => {\n                setNames(props.result);\n                setClicked(true);\n                setLoading(false);\n            });\n        }\n    }, [isLoading]);\n\n    const handleClick = () => setLoading(true);\n\n    return (\n        <div>\n            <Button\n                variant=\"primary\"\n                disabled={isLoading}\n                onClick={!isLoading ? handleClick : null}\n            >\n                {isLoading ? 'Loading…' : 'Check in'}\n            </Button>\n            {\n                isClicked ?\n                    <div>\n                        <br />\n                        {names.map((name, index) => {\n                            return (\n                                <p key={index}>{name}<br /></p>\n                            );\n                        })}\n                    </div>\n                    :\n                    null\n            }\n        </div>\n    );\n}\n\n// ADD YOUR GET ROUTE, YOUR NAME IN PARAM FOR FUNCTION, AND YOUR RESPONSE IN RETURN OBJECT\nconst checkIn = async () => {\n    return axios.all([\n        axios.get('http://localhost:5000/check-fabian'),\n        axios.get('http://localhost:5000/check-miguel'),\n        axios.get('http://localhost:5000/check-chy'),\n    ]).then(axios.spread(function (fabian, miguel, chy) {\n        return { result: [fabian.data.Success, miguel.data.Success, chy.data.Success] }\n    })).then().catch(error => {\n        console.error(error);\n        return { result: 'Failed to check in members' }\n    });\n}\n\nHome.getInitialProps = async () => {\n    try {\n        // call server at endpoint /search-title\n        const res = await axios.get('http://localhost:5000/ping');\n        // res.data is the JSON object returned which is { Success: ***data*** }\n        return { result: res.data.Success }\n    } catch (error) {\n        console.error(error);\n        return { result: 'Failed to fetch data from server' }\n    }\n};\n\nexport default Home;"]},"metadata":{},"sourceType":"module"}